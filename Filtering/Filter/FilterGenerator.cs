namespace ForgeECS
{
  public readonly struct Entities
  {
    private readonly FilterData _data;

    public Entities(World world)
    {
      _data = new FilterData(world);
    }

    public readonly void AddArchetypeIfFits(Archetype archetype) =>
      _data.AddArchetypeIfFits(archetype);
    
    public struct With<T1W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _base._data.SetWith<T1W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct With<T1W, T2W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
      where T2W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      private readonly ComponentCache<T2W> _cache2;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1, _cache2);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _cache2 = ComponentCache<T2W>.From(world);
        _base._data.SetWith<T1W, T2W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
      where T2Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where, T2Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct With<T1W, T2W, T3W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
      where T2W : struct, IValueComponent
      where T3W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      private readonly ComponentCache<T2W> _cache2;
      private readonly ComponentCache<T3W> _cache3;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1, _cache2, _cache3);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _cache2 = ComponentCache<T2W>.From(world);
        _cache3 = ComponentCache<T3W>.From(world);
        _base._data.SetWith<T1W, T2W, T3W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
      where T2Where : struct, ITagComponent
      where T3Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where, T2Where, T3Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct With<T1W, T2W, T3W, T4W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
      where T2W : struct, IValueComponent
      where T3W : struct, IValueComponent
      where T4W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      private readonly ComponentCache<T2W> _cache2;
      private readonly ComponentCache<T3W> _cache3;
      private readonly ComponentCache<T4W> _cache4;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1, _cache2, _cache3, _cache4);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _cache2 = ComponentCache<T2W>.From(world);
        _cache3 = ComponentCache<T3W>.From(world);
        _cache4 = ComponentCache<T4W>.From(world);
        _base._data.SetWith<T1W, T2W, T3W, T4W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
      where T2Where : struct, ITagComponent
      where T3Where : struct, ITagComponent
      where T4Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct With<T1W, T2W, T3W, T4W, T5W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
      where T2W : struct, IValueComponent
      where T3W : struct, IValueComponent
      where T4W : struct, IValueComponent
      where T5W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      private readonly ComponentCache<T2W> _cache2;
      private readonly ComponentCache<T3W> _cache3;
      private readonly ComponentCache<T4W> _cache4;
      private readonly ComponentCache<T5W> _cache5;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1, _cache2, _cache3, _cache4, _cache5);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _cache2 = ComponentCache<T2W>.From(world);
        _cache3 = ComponentCache<T3W>.From(world);
        _cache4 = ComponentCache<T4W>.From(world);
        _cache5 = ComponentCache<T5W>.From(world);
        _base._data.SetWith<T1W, T2W, T3W, T4W, T5W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
      where T2Where : struct, ITagComponent
      where T3Where : struct, ITagComponent
      where T4Where : struct, ITagComponent
      where T5Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct With<T1W, T2W, T3W, T4W, T5W, T6W> : IAddArchetypeIfFits
      where T1W : struct, IValueComponent
      where T2W : struct, IValueComponent
      where T3W : struct, IValueComponent
      where T4W : struct, IValueComponent
      where T5W : struct, IValueComponent
      where T6W : struct, IValueComponent
    {
      private readonly Entities _base;
      private readonly ComponentCache<T1W> _cache1;
      private readonly ComponentCache<T2W> _cache2;
      private readonly ComponentCache<T3W> _cache3;
      private readonly ComponentCache<T4W> _cache4;
      private readonly ComponentCache<T5W> _cache5;
      private readonly ComponentCache<T6W> _cache6;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => new (_base._data.World, _base._data.Archetypes, _cache1, _cache2, _cache3, _cache4, _cache5, _cache6);
      public With(World world)
      {
        _base = new Entities(world);
        _cache1 = ComponentCache<T1W>.From(world);
        _cache2 = ComponentCache<T2W>.From(world);
        _cache3 = ComponentCache<T3W>.From(world);
        _cache4 = ComponentCache<T4W>.From(world);
        _cache5 = ComponentCache<T5W>.From(world);
        _cache6 = ComponentCache<T6W>.From(world);
        _base._data.SetWith<T1W, T2W, T3W, T4W, T5W, T6W>();
      }
      public struct Where<T1Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct Where<T1Where, T2Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where, T2Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
        where T1Where : struct, ITagComponent
        where T2Where : struct, ITagComponent
        where T3Where : struct, ITagComponent
        where T4Where : struct, ITagComponent
        where T5Where : struct, ITagComponent
        where T6Where : struct, ITagComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Where(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
        }
        public struct WithAny<T1Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
          where T1Any : struct, IEcsBaseComponent
          where T2Any : struct, IEcsBaseComponent
          where T3Any : struct, IEcsBaseComponent
          where T4Any : struct, IEcsBaseComponent
          where T5Any : struct, IEcsBaseComponent
          where T6Any : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public WithAny(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
          }
          public struct Without<T1Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without>();
            }
          }
          public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
            }
          }
          public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
            where T1Without : struct, IEcsBaseComponent
            where T2Without : struct, IEcsBaseComponent
            where T3Without : struct, IEcsBaseComponent
            where T4Without : struct, IEcsBaseComponent
            where T5Without : struct, IEcsBaseComponent
            where T6Without : struct, IEcsBaseComponent
          {
            private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
            public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
            public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
            public Without(World world)
            {
              _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
              _base._base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
            }
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly With<T1W, T2W, T3W, T4W, T5W, T6W> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumerator<T1W, T2W, T3W, T4W, T5W, T6W> GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new With<T1W, T2W, T3W, T4W, T5W, T6W>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

    public struct Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> : IAddArchetypeIfFits
      where T1Where : struct, ITagComponent
      where T2Where : struct, ITagComponent
      where T3Where : struct, ITagComponent
      where T4Where : struct, ITagComponent
      where T5Where : struct, ITagComponent
      where T6Where : struct, ITagComponent
    {
      private readonly Entities _base;
      public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
      public readonly FilterEnumeratorNoValue GetEnumerator() => new(_base._data.World, _base._data.Archetypes);
      public Where(World world)
      {
        _base = new Entities(world);
        _base._data.SetWith<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>();
      }
      public struct WithAny<T1Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without>();
        }
      }
      public struct WithAny<T1Any, T2Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any, T2Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
        }
      }
      public struct WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> : IAddArchetypeIfFits
        where T1Any : struct, IEcsBaseComponent
        where T2Any : struct, IEcsBaseComponent
        where T3Any : struct, IEcsBaseComponent
        where T4Any : struct, IEcsBaseComponent
        where T5Any : struct, IEcsBaseComponent
        where T6Any : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public WithAny(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>();
        }
        public struct Without<T1Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without>();
          }
        }
        public struct Without<T1Without, T2Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without>();
          }
        }
        public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
          where T1Without : struct, IEcsBaseComponent
          where T2Without : struct, IEcsBaseComponent
          where T3Without : struct, IEcsBaseComponent
          where T4Without : struct, IEcsBaseComponent
          where T5Without : struct, IEcsBaseComponent
          where T6Without : struct, IEcsBaseComponent
        {
          private readonly WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any> _base;
          public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
          public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
          public Without(World world)
          {
            _base = new WithAny<T1Any, T2Any, T3Any, T4Any, T5Any, T6Any>(world);
            _base._base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
          }
        }
      }
      public struct Without<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without> : IAddArchetypeIfFits
        where T1Without : struct, IEcsBaseComponent
        where T2Without : struct, IEcsBaseComponent
        where T3Without : struct, IEcsBaseComponent
        where T4Without : struct, IEcsBaseComponent
        where T5Without : struct, IEcsBaseComponent
        where T6Without : struct, IEcsBaseComponent
      {
        private readonly Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where> _base;
        public readonly void AddArchetypeIfFits(Archetype archetype) => _base.AddArchetypeIfFits(archetype);
        public readonly FilterEnumeratorNoValue GetEnumerator() => _base.GetEnumerator();
        public Without(World world)
        {
          _base = new Where<T1Where, T2Where, T3Where, T4Where, T5Where, T6Where>(world);
          _base._base._data.SetWithout<T1Without, T2Without, T3Without, T4Without, T5Without, T6Without>();
        }
      }
    }

  }
}

